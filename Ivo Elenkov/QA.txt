
Test management tool!!!

ISTQB

Test case structure

1. Unique ID number
2. Meaningful name
3. Priority- важността от гледна точка на бизнеса.
4. Desctipty- 
5. Prerequsites- неща, които са се скуюили преди тази стъпка.
6. Steps
7. Expectrd result- всяка стъпка има expected result

Test Data/ Input data- Данни, които използваме по време на изпълнение
Steps- Послеdователност от неща, които извършваме.

Rsult of test cases execution

- Test case execution is finished once we have compared the actual and expected result
- Possible statusses after execution
      PASS
      FAIL
      BLOCKED
      SKIPPED

- fail test casses need a following investigation



Categories by Expected sult criteria

- positive-първо се изпълняват те.Те са с по- висок приоритет.
- negative testing- хващат повече bug- ове.


Functional testing 

- functional testing
- performance testing
- security testing
- based on the most common
- integration testing
- integration test cases
- acceptance testing- последно ниво на тестване
- usability testing

Good test case practices

- planning is a crearive process
- ensure requirements covarage
- each test case has a specific purpose
- priority
- review- много важно нещо
- independency of the test cases- независимост между тест кейсовете. Всеки тест кейс има уникално ID.
- clear and precise description of the test case steps
- clear idea and/ or expected result
= write test cases with the idea that everybody should use and understand them
- the test cases should be short and simple sentences should be used
- there shold be some naming convention agreed.
- Think of execution folow when writing test cases/ steps

Bad test case practices

1. Dependency between test cases
2. Poor description of the test cases steps
3. Poor description pn the idea
4. Expected result трябва да е кратък и ясен.

Test suites- папки с тест кейсес. СЪВКУПНОСТ ОТ ТЕСТ КЕЙСИ, ОБЕИДЕНИ ОТ ДАДЕНА ЛОГИКА.

1. autor
2. project manager and developer
3. priority
4. overview
5. Еnviroment
different criteria

Including test cases in Test suite

combining test cases based  

Test management system 

Система, а която се създават и ъпдейтват тест менидвмънти.

Test Rail
Test Link


Link guide

материали*

Skillo




Slack


version control= мястото,в което се съхранява софтуера.

Пази история на всяка промяна. Пази история на всяка промяна.
Мовем да се върнем към стара версия.
Вижда се всяка промяна.
Open source systems. 



Дърпа фаЙлове в текущо състояние. Добавяме нещо, в копието, което е при нас.


Merging.

Типове Version control systems

- CVCS
- DVCS

git e мястото, в което се съхранява всичко.

Git pull

master branch

Дърпаме такущо състояние на нашия комп.

git ad
git commit
git push

cmd/ enter

git status


GIT PULL
работа (домашно)
GIT ADD .
GIT COMMIT-m"MESSAGE"
GIT PULL
GIT PUSH
GIT STATUS (по всяко време)


git init- създава папка, която е repository
git clone- клонираме repository
git add- добавя конкретен файл. git add . добавя всички файлове
git status- 
git commit-m- коментар. Винаги трябва да има съобщение
git commit- аm- 
git check out- gile.txt-възстановява предишната версия. Само на текущата версия
git pull дърпа текущата версия. 
git push- слагаме промените, които сме направили

master branch

git pull
git add . 
git commit -m ""
git pull (just in case pull before push)
git push

git status (current status of the git repository)

git init (create a folder that is repository)

git checkout

Test case

Pre- conditions
set of input values

Test case - описани стъпки, които имат оюакван резултат.

Да мове да отговорим дали сме тествали юаст от продукта.
Кратки изречения, които описват как действа софтуера.

Матруца между очаквания и тест кейс

requirement- изискванията на клиента.

Test ca няма sverity (влиянието на проблема върху цялостнтата работа на системата).

Test case execution

В тест кейса няма еxpected result.

Test case types

High level

Low level- по- ясно дефиниране на стъпките.

JIRA!!!

Grat box-

Functional testting
Основната група от тестването.
Nonfunctional– не се занимашат директно с тестването, а със странични неща.
usability testing
Performance testing (много важно)
UI тестване
Localization testing
Usability testing
Installability testing
Security testting- дали може нашата информация да бъде достигната от други хора.
Rcovery testing- ако откаже софтуера или хардуера откаже, дали всичко ще бъде наред, данните се запазват.
Съвместимостта на нашия appication с други такива- Competability testing.
Performance testing- проверката на applicationа как се държи при различни нтоварвания на системата.
видове:
- load testing
-stress testing
-static testing
- dynamictesting- основен вид тестване.
Alpha testing
beta testing

правят се след като се направи тестинг на различните среди.

Regression testing
При функционално тестване се фокусираме върху софтуера , който ще променяма. Този вид тес следва да гарантира, че след тестването системата ще продълви да работи както и д момента на тестването.
Acceptance testing- 
Smoke testing- наподобява регрешин тестинга. Тестовете се изпълняват преди всички други.
Когато тестваме нова тестова среда.
by degree of automation.


- Manual
- Automation
- SEMI- AUTOMATION TESTING
Formal- когато имаме сценарий
exploratory testing- откриваш дефекти извън това, което е забележимо.
Ad hoc- прави се от по- опитни QA.


According to the degreeof isolation of components

Integration testing- имаме два компонента, които взаимодействат и ние тестваме това взаимодействие.
System testing

Mobile testing

- native app намира севъв файл, който трябва да инсталираме. Доста са бързи. Недостатък е, че трябва да се отделят повече ресурси.
.opa

Debug- помага точно да видим в кой ред на кода има bug.

Selenium!!

unittest- главно се прави от Developers.

БЪГ!

Какво е бъг- отклонение от очакваното поведение на една система. Прадизвикане от грешка в софтуера, предизвикан от човешка грешка. Грешката води до бъг. При тестването намираме греяка, която води до бъг.

Fix- Премахва грешката ,която води до бъг.
Най-много грешки се намират по време на динамичното тестване.
Когато намерим бъг, най- важното нещо е да го reproducе
Проверяваме средата
Когато пишем бъг, посочваме средата, на която тестваме.
Бъг тракинг система. Бъг, който не е  рипортнат , не е бъг.

Ако имаме бъг, който засяга функционалността,  това е сериозна работа. 
Severity

S1- S4
Описанието на бъг  е много важно.
При бъга всяко нещо ,което носи информация е добре дошло. Колкото повече, толкова по- добре.
Attachment- супер важно в един бъг.
Status- показва на какво пположение е в неговия живот.
Component- в коя ерия действаме.
Build number- СУПЕР ВАЖНО!
Dev средата и test средата са разделени.


